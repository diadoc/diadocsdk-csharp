import "Events/PowerOfAttorneyToPost.proto";

package Diadoc.Api.Proto.Invoicing.Signers;

option java_outer_classname = "ExtendedSignerProtos";

message ExtendedSigner {
	optional string BoxId = 1;
	optional bytes SignerCertificate = 2;
	optional string SignerCertificateThumbprint = 3;
	optional ExtendedSignerDetails SignerDetails = 4;
	optional Events.PowerOfAttorneyToPost PowerOfAttorney = 5;
}

message ExtendedSignerDetails {
	required string Surname = 1;
	required string FirstName = 2;
	optional string Patronymic = 3;
	optional string JobTitle = 4;
	optional string Inn = 5;
	optional string RegistrationCertificate = 6;

	required SignerType SignerType = 7 [default = LegalEntity]; // Физическое лицо-Индивидуальный предприниматель – представитель юридического лица (ФЛ-ИП-ЮЛ)
	optional string SignerOrganizationName = 8; // Наименование (НаимОрг)
	optional string SignerInfo = 9;             // Иные сведения, идентифицирующие физическое лицо (ИныеСвед)
	required SignerPowers SignerPowers = 10;    // Область полномочий (ОблПолн)
	required SignerStatus SignerStatus = 11;    // Статус (Статус)
	optional string SignerPowersBase = 12;      // Основание полномочий (доверия) (ОснПолн)
	optional string SignerOrgPowersBase = 13;   // Основание полномочий (доверия) организации (ОснПолнОрг)
}

message ExtendedSignerDetailsToPost {
	optional string JobTitle = 1;
	optional string RegistrationCertificate = 2;
	optional SignerType SignerType = 3 [default = SignerTypeUnspecified];       // Физическое лицо-Индивидуальный предприниматель – представитель юридического лица (ФЛ-ИП-ЮЛ)
	optional string SignerInfo = 4;                                             // Иные сведения, идентифицирующие лицо (Юл.ИныеСвед или СвИП.ИныеСвед  или ФЛ.ИныеСвед)
	optional SignerPowers SignerPowers = 5 [default = SignerPowersUnspecified]; // Область полномочий (ОблПолн)
	optional SignerStatus SignerStatus = 6 [default = SignerStatusUnspecified]; // Статус (Статус)
	optional string SignerPowersBase = 7;                                       // Основание полномочий (доверия) (ОснПолн)
	optional string SignerOrgPowersBase = 8;                                    // Основание полномочий (доверия) организации (ОснПолнОрг)
}

enum SignerType {
	SignerTypeUnspecified = -1;     // Не указано
	LegalEntity = 1;                // Представитель юридического лица
	IndividualEntity = 2;           // Индивидуальный предприниматель
	PhysicalPerson = 3;             // Физическое лицо
}

enum SignerPowers {
	SignerPowersUnspecified = -1;      // Не указано
	InvoiceSigner = 0;                 // лицо, ответственное за подписание счетов-фактур
	PersonMadeOperation = 1;           // лицо, совершившее сделку, операцию
	MadeAndSignOperation = 2;          // лицо, совершившее сделку, операцию и ответственное за её оформление;
	PersonDocumentedOperation = 3;     // лицо, ответственное за оформление свершившегося события;
	MadeOperationAndSignedInvoice = 4; // лицо, совершившее сделку, операцию и ответственное за подписание счетов-фактур;
	MadeAndResponsibleForOperationAndSignedInvoice = 5; // лицо, совершившее сделку, операцию и ответственное за её оформление и за подписание счетов-фактур;
	ResponsibleForOperationAndSignerForInvoice = 6;     // лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур
	ChairmanCommission = 7;            // председатель комиссии
	MemberCommission = 8;              // член комиссии
	PersonApprovedDocument = 21;       // лицо, в полномочия которого входит утверждение документа, оформляющего событие (факт хозяйственной жизни)
	PersonConfirmedDocument = 22;      // лицо, в полномочия которого входит подтверждение оформленного события (факта хозяйственной жизни)
	PersonAgreedOnDocument = 23;       // лицо, в полномочия которого входит согласование документа, оформляющего событие (факт хозяйственной жизни)
	PersonOtherPower = 29;             // лицо с иными полномочиями
}

enum SignerStatus {
	SignerStatusUnspecified = -1;        // Не указано
	SellerEmployee = 1;                  // Работник организации продавца товаров (работ, услуг, имущественных прав);
	InformationCreatorEmployee = 2;      // Работник организации - составителя информации продавца;
	OtherOrganizationEmployee = 3;       // Работник иной уполномоченной организации;
	AuthorizedPerson = 4;                // Уполномоченное физическое лицо (в том числе индивидуальный предприниматель);
	BuyerEmployee = 5;                   // Работник организации - покупателя (для документов в формате приказа №820);
	InformationCreatorBuyerEmployee = 6; // Работник организации - составителя файла обмена информации покупателя, если составитель файла обмена информации покупателя не является покупателем (для документов в формате приказа №820)
}

enum DocumentTitleType {
	Absent = -1;
	UtdSeller = 0;               // Данные для титула продавца УПД
	UtdBuyer = 1;                // Данные для титула покупателя УПД
	UcdSeller = 2;               // Данные для титула продавца УКД
	UcdBuyer = 3;                // Данные для титула покупателя УКД
	TovTorg551Seller = 4;        // Данные для титула продавца формата приказа 551
	TovTorg551Buyer = 5;         // Данные для титула покупателя формата приказа 551
	AccCert552Seller = 6;        // Данные для титула исполнителя формата приказа 552
	AccCert552Buyer = 7;         // Данные для титула заказчика формата приказа 552
	Utd820Buyer = 8;             // Данные для титула покупателя УПД формата приказа 820 
	Torg2Buyer = 9;              // Данные для титула покупателя приказа 423
	Torg2AdditionalInfo = 10;    // Данные для титула дополнительных сведений приказа 423
	Ucd736Buyer = 11;            // Данные для титула покупателя УКД формата приказа 736
	Utd970Seller = 12;           // Данные для титула продавца УПД формата приказа 970
	Utd970Buyer = 13;            // Данные для титула покупателя УПД формата приказа 970
}