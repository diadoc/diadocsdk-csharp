//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: Docflow/UniversalMessageAttachmentDocflow.proto
// Note: requires additional types generated from: Docflow/Attachment.proto
// Note: requires additional types generated from: UniversalMessage.proto
namespace Diadoc.Api.Proto.Docflow
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"UniversalMessageAttachmentDocflow")]
  public partial class UniversalMessageAttachmentDocflow : global::ProtoBuf.IExtensible
  {
    public UniversalMessageAttachmentDocflow() {}
    
    private Diadoc.Api.Proto.Docflow.Attachment _Attachment;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"Attachment", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public Diadoc.Api.Proto.Docflow.Attachment Attachment
    {
      get { return _Attachment; }
      set { _Attachment = value; }
    }
    private Diadoc.Api.Proto.UniversalMessageInfo _MessageInfo;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"MessageInfo", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public Diadoc.Api.Proto.UniversalMessageInfo MessageInfo
    {
      get { return _MessageInfo; }
      set { _MessageInfo = value; }
    }
    private string _ContentTypeId;
    [global::ProtoBuf.ProtoMember(3, IsRequired = true, Name=@"ContentTypeId", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string ContentTypeId
    {
      get { return _ContentTypeId; }
      set { _ContentTypeId = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}