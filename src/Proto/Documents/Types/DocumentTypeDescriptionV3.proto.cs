//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: Documents/Types/DocumentTypeDescriptionV3.proto
// Note: requires additional types generated from: Documents/Types/DocumentTypeDescriptionV2.proto
namespace Diadoc.Api.Proto.Documents.Types
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"DocumentTypeDescriptionV3")]
  public partial class DocumentTypeDescriptionV3 : global::ProtoBuf.IExtensible
  {
    public DocumentTypeDescriptionV3() {}
    
    private string _Name;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"Name", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string Name
    {
      get { return _Name; }
      set { _Name = value; }
    }
    private string _Title;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"Title", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string Title
    {
      get { return _Title; }
      set { _Title = value; }
    }
    private readonly global::System.Collections.Generic.List<int> _SupportedDocflows = new global::System.Collections.Generic.List<int>();
    [global::ProtoBuf.ProtoMember(3, Name=@"SupportedDocflows", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public global::System.Collections.Generic.List<int> SupportedDocflows
    {
      get { return _SupportedDocflows; }
    }
  
    private bool _RequiresFnsRegistration;
    [global::ProtoBuf.ProtoMember(4, IsRequired = true, Name=@"RequiresFnsRegistration", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public bool RequiresFnsRegistration
    {
      get { return _RequiresFnsRegistration; }
      set { _RequiresFnsRegistration = value; }
    }
    private readonly global::System.Collections.Generic.List<Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2> _Functions = new global::System.Collections.Generic.List<Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2>();
    [global::ProtoBuf.ProtoMember(9, Name=@"Functions", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2> Functions
    {
      get { return _Functions; }
    }
  
    private string _UniversalMessagesStartDate;
    [global::ProtoBuf.ProtoMember(10, IsRequired = true, Name=@"UniversalMessagesStartDate", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string UniversalMessagesStartDate
    {
      get { return _UniversalMessagesStartDate; }
      set { _UniversalMessagesStartDate = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"GetDocumentTypesResponseV3")]
  public partial class GetDocumentTypesResponseV3 : global::ProtoBuf.IExtensible
  {
    public GetDocumentTypesResponseV3() {}
    
    private readonly global::System.Collections.Generic.List<Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV3> _DocumentTypes = new global::System.Collections.Generic.List<Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV3>();
    [global::ProtoBuf.ProtoMember(1, Name=@"DocumentTypes", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV3> DocumentTypes
    {
      get { return _DocumentTypes; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}